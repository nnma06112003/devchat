import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { In, Repository } from 'typeorm';
import { Attachment, Message, User } from '@myorg/entities';
import { Channel } from '@myorg/entities';
import { BaseService } from '@myorg/common';
import { RpcException } from '@nestjs/microservices';
import { Repository as RepoEntity } from '@myorg/entities'; // ƒê·∫£m b·∫£o import ƒë√∫ng entity Repository

@Injectable()
export class ChatService extends BaseService<Message> {
  /**
   * Tham gia k√™nh chat
   * @param user user hi·ªán t·∫°i
   * @param data { id: string, type: 'group' | 'personal' }
   */

  constructor(
    @InjectRepository(Message)
    private readonly messageRepo: Repository<Message>,
    @InjectRepository(Channel)
    private readonly channelRepo: Repository<Channel>,
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
    @InjectRepository(Attachment)
    private readonly attachmentRepo: Repository<Attachment>,
  ) {
    super(messageRepo);
  }

  async joinChannel(user: any, data: { id: string; type: string }) {
    if (!user || !user.id) {
      throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng', status: 401 });
    }
    if (!data?.id || !data?.type) {
      throw new RpcException({
        msg: 'Thi·∫øu th√¥ng tin k√™nh ho·∫∑c lo·∫°i k√™nh',
        status: 400,
      });
    }
    if (data.type === 'group') {
      // T√¨m k√™nh group
      const channel = await this.channelRepo.findOne({
        where: { id: data.id, type: 'group' },
        relations: ['users'],
      });
      if (!channel) {
        throw new RpcException({
          msg: 'Kh√¥ng t√¨m th·∫•y k√™nh c√¥ng khai',
          status: 404,
        });
      }
      // Ki·ªÉm tra user ƒë√£ l√† th√†nh vi√™n ch∆∞a
      const isMember = channel.users.some(
        (u) => String(u.id) === String(user.id),
      );
      if (isMember) {
        return {
          msg: 'B·∫°n ƒëang l√† th√†nh vi√™n c·ªßa k√™nh n√†y',
          channelId: data.id,
        };
      }
      // Th√™m user v√†o k√™nh
      channel.users.push(user);
      channel.member_count = channel.users.length;
      await this.channelRepo.save(channel);
      return {
        msg: 'Tham gia k√™nh th√†nh c√¥ng',
        channelId: channel.id,
      };
    } else if (data.type === 'personal') {
      // T√¨m user c√≤n l·∫°i
      const otherUser = await this.userRepo.findOne({ where: { id: data.id } });
      if (!otherUser) {
        throw new RpcException({
          msg: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≤n l·∫°i',
          status: 404,
        });
      }
      // Ki·ªÉm tra ƒë√£ c√≥ k√™nh personal gi·ªØa 2 user ch∆∞a
      const existChannel = await this.channelRepo
        .createQueryBuilder('channel')
        .leftJoinAndSelect('channel.users', 'member')
        .where('channel.type = :type', { type: 'personal' })
        .andWhere('member.id IN (:...ids)', { ids: [user.id, otherUser.id] })
        .getMany();
      // L·ªçc k√™nh c√≥ ƒë√∫ng 2 th√†nh vi√™n l√† 2 user n√†y
      const found = existChannel.find(
        (c) =>
          c.users.length === 2 &&
          c.users.some((u) => String(u.id) === String(user.id)) &&
          c.users.some((u) => String(u.id) === String(otherUser.id)),
      );
      if (found) {
        return {
          msg: 'B·∫°n ƒë√£ nh·∫Øn tin v·ªõi ng∆∞·ªùi n√†y',
          channelId: found.id,
        };
      }
      // T·∫°o k√™nh m·ªõi
      const channel = this.channelRepo.create({
        name: 'Personal Chat',
        type: 'personal',
        users: [user, otherUser],
        member_count: 2,
      });
      const saved = await this.channelRepo.save(channel);
      return {
        msg: 'Hai b·∫°n c√≥ th·ªÉ nh·∫Øn tin v·ªõi nhau',
        channelId: saved.id,
      };
    } else {
      throw new RpcException({ msg: 'K√™nh kh√¥ng h·ª£p l·ªá', status: 400 });
    }
  }
  async createChannel(
    user: any,
    params: {
      userIds: (string | number)[];
      name?: string;
      type?: 'personal' | 'group' | 'group-private';
    },
  ) {
    if (!user || !user.id) {
      throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng', status: 401 });
    }

    let memberIds = [...params.userIds];

    const owner = await this.check_exist_with_data(
      User,
      { id: user.id },
      'T√†i kho·∫£n kh√¥ng h·ª£p l·ªá',
    );

    // Kh√¥ng cho user.id tr√πng trong userIds
    memberIds = memberIds.filter((id) => id !== user.id);

    if (!memberIds.includes(user.id)) {
      memberIds.push(user.id);
    }

    // L·∫•y user entities
    const members = await this.check_exist_with_datas(
      User,
      { id: In(memberIds) },
      'Danh s√°ch th√†nh vi√™n kh√¥ng h·ª£p l·ªá',
    );

    if (members.length !== memberIds.length) {
      throw new RpcException({
        msg: 'Thi·∫øu th√†nh vi√™n k√™nh chat',
        status: 400,
      });
    }

    let type: 'personal' | 'group' | 'group-private' = 'group';
    if (members.length === 2) {
      type = 'personal';
    } else if (members.length > 2 && params.type === 'group-private') {
      type = 'group-private';
    } else if (members.length > 2 && params.type === 'group') {
      type = 'group';
    }

    const channel = this.channelRepo.create({
      name:
        params.name || (type === 'personal' ? `Personal Chat` : `Group Chat`),
      type,
      users: members,
      member_count: members.length,
      owner: type === 'group' || type === 'group-private' ? owner : undefined,
    });

    const saved = await this.channelRepo.save(channel);
    // L·∫•y l·∫°i b·∫£n ghi channel v·ª´a t·∫°o (ƒë·∫£m b·∫£o c√≥ id v√† members)
    const fullChannel: any = await this.channelRepo.findOne({
      where: { id: saved.id },
      relations: ['users'],
    });

    let isActive = true;
    let channelName = fullChannel.name;
    if (fullChannel.type === 'personal') {
      const msgCount = await this.messageRepo.count({
        where: { channel: { id: fullChannel.id } },
      });
      isActive = msgCount > 0;
      const otherUser = (fullChannel.users || []).find(
        (u: any) => String(u.id) !== String(user.id),
      );
      if (otherUser && otherUser.username) {
        channelName = otherUser.username;
      }
    }
    const { users, name, ...rest }: any = fullChannel;
    return {
      ...rest,
      name: channelName,
      isActive,
      members: (fullChannel?.users || []).map((u: any) =>
        this.remove_field_user({ ...u }),
      ),
    };
  }

  // G·ª≠i tin nh·∫Øn v√†o channel
  async sendMessage(
    user: any,
    data: { channelId: string; text: string; send_at: any; type?: string; json_data?: any },
    attachments?: any[],
  ) {
    console.log(`üîç [DEBUG] Chat service sendMessage called with:`, {
      channelId: data.channelId,
      type: data.type,
      hasJsonData: !!data.json_data,
      jsonDataType: typeof data.json_data,
      text: data.text?.substring(0, 100) + '...'
    });

    const channel = await this.check_exist_with_data(
      Channel,
      { id: data.channelId },
      'K√™nh chat kh√¥ng t·ªìn t·∫°i',
    );
    const sender = await this.check_exist_with_data(
      User,
      { id: user.id },
      'Ng∆∞·ªùi g·ª≠i kh√¥ng t·ªìn t·∫°i',
    );
    if (!channel)
      throw new RpcException({ msg: 'K√™nh chat kh√¥ng t·ªìn t·∫°i', status: 404 });

    const messageData = {
      ...data,
      channel,
      sender,
      send_at: data.send_at,
      type: data.type || 'message',
      json_data: data.json_data || null,
    };

    console.log(`üîç [DEBUG] Creating message with data:`, {
      type: messageData.type,
      hasJsonData: !!messageData.json_data,
      text: messageData.text?.substring(0, 50) + '...'
    });

    const message = this.messageRepo.create(messageData);

    await this.messageRepo.save(message);

    console.log(`üîç [DEBUG] Message saved to database:`, {
      id: message.id,
      type: message.type,
      hasJsonData: !!message.json_data,
      text: message.text?.substring(0, 50) + '...'
    });

    if (attachments && attachments.length > 0) {
      message.attachments = this.attachmentRepo.create(
        attachments.map((a) => ({
          ...a,
          message,
        })),
      );
    }

    await this.messageRepo.save(message);

    const msgCount = await this.messageRepo.count({
      where: { channel: { id: channel.id } },
    });

    // ƒê·∫øm s·ªë message trong channel

    if (msgCount === 1) {
      // ƒê√¢y l√† message ƒë·∫ßu ti√™n trong channel
      return {
        ...message,
        channel: {
          id: channel.id,
          type: channel.type,
          member_count: channel.member_count,
          members: (channel.users || []).map((u) =>
            this.remove_field_user({ ...u }),
          ),
          created_at: channel.created_at,
          updated_at: channel.updated_at,
          isActive: true,
        },
      };
    }

    // N·∫øu kh√¥ng ph·∫£i message ƒë·∫ßu ti√™n ‚Üí ch·ªâ tr·∫£ v·ªÅ message
    console.log(`üîç [DEBUG] Returning message:`, {
      id: message.id,
      type: message.type,
      hasJsonData: !!message.json_data,
      text: message.text?.substring(0, 50) + '...'
    });
    
    return message;
  }

  // L·∫•y danh s√°ch channel c·ªßa userId
  async listChannels(user: any) {
    // Tr·∫£ v·ªÅ danh s√°ch c√°c channel m√† user l√† th√†nh vi√™n

    if (!user || !user.id) {
      throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng', status: 401 });
    }
    const channels = await this.channelRepo
      .createQueryBuilder('channel')
      .leftJoinAndSelect('channel.users', 'member')
      .leftJoin('channel.users', 'user')
      .where('user.id = :userId', { userId: user?.id })
      .getMany();
    // Tr·∫£ v·ªÅ danh s√°ch channel, m·ªói channel c√≥ m·∫£ng members ƒë√£ lo·∫°i b·ªè tr∆∞·ªùng nh·∫°y c·∫£m
    const result = [];
    for (const channel of channels) {
      let isActive = true;
      let channelName = channel.name;
      if (channel.type === 'personal') {
        const msgCount = await this.messageRepo.count({
          where: { channel: { id: channel.id } },
        });
        isActive = msgCount > 0;
        const otherUser = (channel.users || []).find(
          (u) => String(u.id) !== String(user.id),
        );
        if (otherUser && otherUser.username) {
          channelName = otherUser.username;
        }
      }
      // group v√† group-private lu√¥n isActive = true
      result.push({
        id: channel.id,
        name: channelName,
        type: channel.type,
        member_count: channel.member_count,
        members: (channel.users || []).map((u) =>
          this.remove_field_user({ ...u }),
        ),
        created_at: channel.created_at,
        updated_at: channel.updated_at,
        isActive,
        // members: (channel.users || []).map(u => this.remove_field_user({ ...u })),
      });
    }
    return result;
  }

  /**
   * L·∫•y l·ªãch s·ª≠ tin nh·∫Øn c·ªßa m·ªôt channel v·ªõi ph√¢n trang v√† filter.
   * - page/pageSize: ph√¢n trang d·ª±a tr√™n offset
   * - after: id c·ªßa tin nh·∫Øn cu·ªëi (cursor) -> tr·∫£ c√°c tin nh·∫Øn sau tin nh·∫Øn n√†y (by created_at)
   * - since: timestamp ISO/string/Date -> tr·∫£ c√°c tin nh·∫Øn t·ª´ l√∫c n√†y tr·ªü ƒëi
   * - order: 'ASC' | 'DESC' (m·∫∑c ƒë·ªãnh 'ASC')
   * Tr·∫£ v·ªÅ { items, total, page, pageSize, hasMore }
   */
  // G·ª£i √Ω index ƒë·ªÉ truy v·∫•n nhanh:
  // CREATE INDEX IF NOT EXISTS ix_msg_channel_time_id ON message(channel_id, send_at DESC, id DESC);

  async fetchHistory(
    user: any,
    channelId: string | number,
    options?: {
      pageSize?: number; // m·∫∑c ƒë·ªãnh 50
      after?: string; // messageId cursor: l·∫•y M·ªöI H∆†N anchor (d√πng cho live catch-up)
      before?: string; // messageId cursor: l·∫•y C≈® H∆†N anchor (scroll l√™n: trang 2,3,...)
      since?: string | Date; // l·ªçc t·ª´ th·ªùi ƒëi·ªÉm n√†y tr·ªü ƒëi (n·∫øu c·∫ßn)
      latest?: boolean; // ch·ªâ l·∫•y 1 tin m·ªõi nh·∫•t
    },
  ) {
    const pageSize = Math.min(200, Math.max(1, options?.pageSize ?? 50));

    // 1) Ki·ªÉm tra quy·ªÅn truy c·∫≠p k√™nh
    const isMember = await this.channelRepo
      .createQueryBuilder('c')
      .innerJoin('c.users', 'u', 'u.id = :userId', { userId: user.id })
      .where('c.id = :channelId', { channelId })
      .getExists();

    if (!isMember) {
      throw new RpcException({
        msg: 'Kh√¥ng t√¨m th·∫•y k√™nh chat ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn',
        status: 404,
      });
    }

    // 2) L·∫•y channel + owner + users (ƒë·ªÉ build members/sender)
    const channel = await this.channelRepo
      .createQueryBuilder('channel')
      .leftJoinAndSelect('channel.owner', 'owner')
      .leftJoinAndSelect('channel.users', 'member')
      .where('channel.id = :channelId', { channelId })
      .getOne();

    if (!channel) {
      throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y k√™nh chat', status: 404 });
    }

    // Helper: l·∫•y anchor (id + send_at)
    const getAnchor = async (id?: string) => {
      if (!id) return undefined;
      return this.messageRepo.findOne({
        where: { id },
        select: ['id', 'send_at'],
      });
    };

    const anchorBefore = await getAnchor(options?.before);
    const anchorAfter = !options?.before
      ? await getAnchor(options?.after)
      : undefined;

    // 3) Base QB
    const baseQB = this.messageRepo
      .createQueryBuilder('message')
      .leftJoinAndSelect('message.sender', 'sender')
      .leftJoinAndSelect('message.attachments', 'attachment')
      // n·∫øu FK l√† snake_case th√¨ ƒë·ªïi th√†nh 'message.channel_id'
      .where('message.channelId = :channelId', { channelId });

    if (options?.since) {
      const sinceDate = new Date(options.since);
      if (!isNaN(sinceDate.getTime())) {
        baseQB.andWhere('message.send_at >= :sinceDate', { sinceDate });
      }
    }

    let rows: any[] = [];
    let hasMoreOlder = false;
    let hasMoreNewer = false;

    if (options?.latest) {
      // ch·ªâ l·∫•y 1 tin m·ªõi nh·∫•t
      rows = await baseQB
        .orderBy('message.send_at', 'DESC')
        .addOrderBy('message.id', 'DESC')
        .take(1)
        .getMany();

      // Tr·∫£ v·ªÅ 1 ph·∫ßn t·ª≠, kh√¥ng ƒë·∫£o, nh∆∞ng ƒë·ªÉ th·ªëng nh·∫•t UI (c≈©‚Üím·ªõi), ta ƒë·∫£o ƒë·ªÉ newest l√† cu·ªëi c√πng
      rows = rows.reverse();
    } else if (anchorBefore) {
      // TRANG C≈® H∆†N (trang 2,3...) ‚Äî l·∫•y c≈© h∆°n anchor, ORDER DESC ƒë·ªÉ ch·ªçn ƒë√∫ng c·ª≠a s·ªï m·ªõi‚Üíc≈©
      const r = await baseQB
        .andWhere(
          `(message.send_at < :anchorTime)
         OR (message.send_at = :anchorTime AND message.id < :anchorId)`,
          { anchorTime: anchorBefore.send_at, anchorId: anchorBefore.id },
        )
        .orderBy('message.send_at', 'DESC')
        .addOrderBy('message.id', 'DESC')
        .take(pageSize + 1)
        .getMany();

      hasMoreOlder = r.length > pageSize;
      rows = r.slice(0, pageSize);

      // Quan tr·ªçng: ƒë·∫£o sang ASC (c≈©‚Üím·ªõi) ƒë·ªÉ PH·∫¶N T·ª¨ CU·ªêI = M·ªöI NH·∫§T C·ª¶A TRANG
      rows = rows.reverse();

      // N·∫øu c√≤n ph·∫ßn t·ª≠ th·ª© (pageSize+1) => v·∫´n c√≤n c≈© h∆°n
      // hasMoreNewer ·ªü nh√°nh n√†y kh√¥ng c·∫ßn set (cu·ªôn xu·ªëng th∆∞·ªùng kh√¥ng d√πng), nh∆∞ng c√≥ th·ªÉ t√≠nh n·∫øu mu·ªën
    } else if (anchorAfter) {
      // L·∫§Y M·ªöI H∆†N ANCHOR (b·∫Øt k·ªãp hi·ªán t·∫°i): ORDER ASC ƒë·ªÉ ·ªïn ƒë·ªãnh, r·ªìi gi·ªØ lu√¥n ASC (c≈©‚Üím·ªõi)
      const rAsc = await baseQB
        .andWhere(
          `(message.send_at > :anchorTime)
         OR (message.send_at = :anchorTime AND message.id > :anchorId)`,
          { anchorTime: anchorAfter.send_at, anchorId: anchorAfter.id },
        )
        .orderBy('message.send_at', 'ASC')
        .addOrderBy('message.id', 'ASC')
        .take(pageSize + 1)
        .getMany();

      hasMoreNewer = rAsc.length > pageSize;
      rows = rAsc.slice(0, pageSize);

      // Gi·ªØ nguy√™n ASC (c≈©‚Üím·ªõi) ƒë·ªÉ ph·∫ßn t·ª≠ cu·ªëi c√πng l√† m·ªõi nh·∫•t c·ªßa trang n√†y
    } else {
      // TRANG ƒê·∫¶U (initial): ch·ªçn 50 tin m·ªõi nh·∫•t theo DESC r·ªìi ƒë·∫£o sang ASC ƒë·ªÉ newest n·∫±m CU·ªêI
      const r = await baseQB
        .orderBy('message.send_at', 'DESC')
        .addOrderBy('message.id', 'DESC')
        .take(pageSize + 1)
        .getMany();

      hasMoreOlder = r.length > pageSize; // c√≤n c≈© h∆°n (ƒë·ªÉ k√©o trang 2)
      rows = r.slice(0, pageSize).reverse(); // ƒë·∫£o sang ASC (c≈©‚Üím·ªõi)
    }

    // 4) Chu·∫©n h√≥a sender & flags
    const items = rows.map((msg) => {
      let senderInfo: any = undefined;
      let isMine = false;

      if (msg.sender) {
        if (typeof msg.sender === 'object') {
          senderInfo = this.remove_field_user({ ...msg.sender });
          isMine = String(msg.sender.id) === String(user.id);
        } else {
          const senderObj = (channel.users || []).find(
            (u) => String(u.id) === String(msg.sender),
          );
          senderInfo = senderObj
            ? this.remove_field_user({ ...senderObj })
            : undefined;
          isMine = String(msg.sender) === String(user.id);
        }
      }

      const attachments = (msg.attachments || []).map((att: any) => ({
        id: att.id,
        filename: att.filename,
        fileUrl: att.fileUrl,
        mimeType: att.mimeType,
        fileSize: att.fileSize,
        key: att.key,
      }));

      return {
        ...msg,
        channelId: msg.channelId || (msg.channel ? msg.channel.id : null),
        sender: senderInfo,
        attachments,
        isMine,
      };
    });

    // 5) Cursors (DANH S√ÅCH ƒêANG ·ªû TH·ª® T·ª∞ ASC: C≈® ‚Üí M·ªöI)
    const oldest = items[0]; // ph·∫ßn t·ª≠ ƒë·∫ßu (c≈© nh·∫•t c·ªßa trang)
    const newest = items[items.length - 1]; // ph·∫ßn t·ª≠ cu·ªëi (m·ªõi nh·∫•t c·ªßa trang) ‚Äî ƒë√∫ng y√™u c·∫ßu

    // Scroll l√™n (trang c≈© h∆°n): d√πng 'before' = id c·ªßa ph·∫ßn t·ª≠ ƒê·∫¶U (oldest)
    const nextBefore = oldest?.id ?? null;

    // B·∫Øt k·ªãp hi·ªán t·∫°i (n·∫øu c√≥ trang m·ªõi h∆°n): d√πng 'after' = id c·ªßa ph·∫ßn t·ª≠ CU·ªêI (newest)
    const nextAfter = newest?.id ?? null;

    // 6) Members t·ªëi gi·∫£n
    const members = (channel.users || []).map((u) => ({
      id: u.id,
      username: u.username,
      email: u.email,
      isMine: String(u.id) === String(user.id),
      isOwner: channel.owner && String(u.id) === String(channel.owner.id),
    }));

    const { users, ...channelInfo } = channel;

    return {
      channel: channelInfo,
      members,
      items, // TH·ª® T·ª∞ ASC (c≈© ‚Üí m·ªõi) ‚Äî ph·∫ßn t·ª≠ cu·ªëi l√† m·ªõi nh·∫•t
      total: null,
      page: null,
      pageSize,
      hasMoreOlder, // c√≤n trang c≈© h∆°n (ƒë·ªÉ k√©o ti·∫øp 901‚Üí950, ‚Ä¶)
      hasMoreNewer, // c√≤n trang m·ªõi h∆°n (n·∫øu d√πng nh√°nh after)
      cursors: {
        before: nextBefore, // truy·ªÅn v√†o options.before ƒë·ªÉ l·∫•y C≈® H∆†N
        after: nextAfter, // truy·ªÅn v√†o options.after  ƒë·ªÉ l·∫•y M·ªöI H∆†N
      },
    };
  }

  async searchChatEntities(
    user: any,
    data: {
      key: string;
      type: 'user' | 'group' | 'group-private' | 'personal' | 'all';
      limit: number;
    },
  ) {
    const key = (data?.key || '').trim().toLowerCase();
    const type = data?.type || 'all';
    const limit = data?.limit || 5;

    if (!key) {
      return { users: [], channels: { personal: [], group: [], private: [] } };
    }

    // ---- Helper queries ----
    const searchUsers = async () => {
      const users = await this.userRepo
        .createQueryBuilder('u')
        .select(['u.id', 'u.username', 'u.email'])
        .where(
          '(LOWER(u.username) LIKE :key OR LOWER(u.email) LIKE :key) AND u.id != :uid',
          { key: `%${key}%`, uid: user.id },
        )
        .take(limit)
        .getMany();
      return users.map((u) => this.remove_field_user({ ...u }));
    };

    const searchGroupChannels = async () => {
      const channels: any = await this.channelRepo
        .createQueryBuilder('c')
        .select(['c.id', 'c.name', 'c.type'])
        .where('c.type = :type', { type: 'group' })
        .andWhere('LOWER(c.name) LIKE :key', { key: `%${key}%` })
        .take(limit)
        .getMany();

      // check membership (ch·ªâ query id th√¥i cho nh·∫π)
      const memberIds = await this.channelRepo
        .createQueryBuilder('c')
        .innerJoin('c.users', 'u', 'u.id = :uid', { uid: user.id })
        .select('c.id', 'id')
        .where('c.type = :type', { type: 'group' })
        .getRawMany();

      const memberSet = new Set(memberIds.map((m) => m.id));
      return channels.map((ch: any) => ({
        ...ch,
        isMember: memberSet.has(ch.id),
      }));
    };

    const searchPrivateChannels = async () => {
      const channels = await this.channelRepo
        .createQueryBuilder('c')
        .innerJoin('c.users', 'u', 'u.id = :uid', { uid: user.id }) // ch·ªâ l·∫•y k√™nh user l√† th√†nh vi√™n
        .select(['c.id', 'c.name', 'c.type'])
        .where('c.type = :type', { type: 'group-private' })
        .andWhere('LOWER(c.name) LIKE :key', { key: `%${key}%` })
        .take(limit)
        .getMany();

      return channels.map((ch) => ({ ...ch, isMember: true }));
    };

    const searchPersonalChannels = async () => {
      const channels = await this.channelRepo
        .createQueryBuilder('c')
        .innerJoin('c.users', 'u') // user hi·ªán t·∫°i
        .innerJoin('c.users', 'ou') // other user
        .select(['c.id', 'c.type', 'ou.username']) // ch·ªâ c·∫ßn id, type, username
        .where('c.type = :type', { type: 'personal' })
        .andWhere('u.id = :uid', { uid: user.id })
        .andWhere('ou.id != :uid', { uid: user.id })
        .andWhere('LOWER(ou.username) LIKE :key', { key: `%${key}%` })
        .take(limit)
        .getRawMany(); // d√πng rawMany cho ti·ªán mapping

      return channels.map((ch) => ({
        id: ch.c_id,
        type: ch.c_type,
        name: ch.ou_username, // ƒë·∫∑t t√™n k√™nh = username c·ªßa member c√≤n l·∫°i
        isMember: true,
      }));
    };

    // ---- Main logic ----
    const result: any = {
      users: [],
      channels: { personal: [], group: [], private: [] },
    };

    if (type === 'user') {
      result.users = await searchUsers();
    } else if (type === 'group') {
      result.channels.group = await searchGroupChannels();
    } else if (type === 'group-private') {
      result.channels.private = await searchPrivateChannels();
    } else if (type === 'personal') {
      result.channels.personal = await searchPersonalChannels();
    } else {
      // all
      [
        result.users,
        result.channels.group,
        result.channels.private,
        result.channels.personal,
      ] = await Promise.all([
        searchUsers(),
        searchGroupChannels(),
        searchPrivateChannels(),
        searchPersonalChannels(),
      ]);
    }

    return result;
  }

  async addRepositoriesToChannel(
    userId: string | number,
    channelId: string | number,
    repoIds: string[]
  ) {
    // 1. Ki·ªÉm tra danh s√°ch repo_id h·ª£p l·ªá
    if (!Array.isArray(repoIds) || repoIds.length === 0) {
      throw new RpcException({ msg: 'Danh s√°ch Repository kh√¥ng h·ª£p l·ªá', status: 400 });
    }

    // 2. Ki·ªÉm tra user t·ªìn t·∫°i v√† ƒë√£ c√≥ installation_id
    const user = await this.userRepo.findOne({ where: { id: userId } });
    if (!user) {
      throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y user', status: 404 });
    }
    if (!user.github_installation_id) {
      throw new RpcException({ msg: 'User ch∆∞a c√†i ƒë·∫∑t GitHub App', status: 400 });
    }

    // 3. Ki·ªÉm tra channel t·ªìn t·∫°i v√† user l√† th√†nh vi√™n
    const channel = await this.channelRepo.findOne({
      where: { id: channelId },
      relations: ['users'],
    });
    if (!channel) {
      throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y channel', status: 404 });
    }
    const isMember = channel.users.some((u) => String(u.id) === String(user.id));
    if (!isMember) {
      throw new RpcException({ msg: 'B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa k√™nh n√†y', status: 403 });
    }

    // 4. Ki·ªÉm tra repo ƒë√£ li√™n k·∫øt v·ªõi channel ch∆∞a
    const repoRepo = this.attachmentRepo.manager.getRepository(RepoEntity);
    for (const rpid of repoIds) {
      const repo = await repoRepo.findOne({
        where: { repo_id: rpid, user: { id: user.id } },
        relations: ['channels'],
      });
      if (repo && repo.channels?.some((c) => String(c.id) === String(channel.id))) {
        throw new RpcException({ msg: `Kh√¥ng ƒë∆∞·ª£c th√™m tr√πng Repository`, status: 400 });
      }
    }

    // 5. Th√™m c√°c repo v√†o DB (n·∫øu ch∆∞a c√≥), li√™n k·∫øt v·ªõi user v√† channel
    const repos: RepoEntity[] = [];
    for (const rpid of repoIds) {
      let repo = await repoRepo.findOne({ where: { repo_id: rpid, user: { id: user.id } }, relations: ['channels'] });
      if (!repo) {
        repo = repoRepo.create({ repo_id: rpid, user });
        await repoRepo.save(repo);
      }
      // Li√™n k·∫øt repo v·ªõi channel n·∫øu ch∆∞a c√≥
      if (!repo.channels) repo.channels = [];
      const alreadyLinked = repo.channels.some((c) => String(c.id) === String(channel.id));
      if (!alreadyLinked) {
        repo.channels.push(channel);
        await repoRepo.save(repo);
      }
      repos.push(repo);
    }

    return {
      repositories: repos.map((r) => ({
        id: r.id,
        repo_id: r.repo_id,
      })),
    };
  }

  async listRepositoriesByChannel(
    userId: string | number,
    channelId: string | number,
    data: {
      order?: 'asc' | 'desc',
      limit?: number,
      page?: number
    }
  ) {
    // Set default values
    const order = data.order ?? 'asc';
    const limit = data.limit ?? 20;
    const page = data.page ?? 1;

    // 1. Ki·ªÉm tra channel t·ªìn t·∫°i v√† user l√† th√†nh vi√™n
    const channel = await this.channelRepo.findOne({
      where: { id: channelId },
      relations: ['users', 'repositories', 'repositories.user'],
    });
    if (!channel) {
      throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y channel', status: 404 });
    }
    const isMember = channel.users.some((u) => String(u.id) === String(userId));
    if (!isMember) {
      throw new RpcException({ msg: 'B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa k√™nh n√†y', status: 403 });
    }

    // 2. L·∫•y danh s√°ch repo, sort theo id
    let repos = [...(channel.repositories || [])];
    repos.sort((a, b) =>
      order === 'asc'
        ? Number(a.id) - Number(b.id)
        : Number(b.id) - Number(a.id)
    );

    // 3. Ph√¢n trang
    const total = repos.length;
    const start = (page - 1) * limit;
    const end = start + limit;
    const pagedRepos = repos.slice(start, end);

    // 4. Tr·∫£ v·ªÅ th√¥ng tin repo c·∫ßn thi·∫øt
    return {
      total,
      page,
      limit,
      items: pagedRepos.map((repo) => ({
        repo_id: repo.repo_id,
        user_id: repo.user?.id || null,
        repo_installation : repo.user?.github_installation_id || null
      })),
    };
  }

  async removeRepositoryFromChannel(
    userId: string | number,
    channelId: string | number,
    repoId: string | number
  ) {
    // 1. Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await this.userRepo.findOne({ where: { id: userId } });
    if (!user) throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y user', status: 404 });

    // 2. Ki·ªÉm tra channel t·ªìn t·∫°i v√† user l√† th√†nh vi√™n
    const channel = await this.channelRepo.findOne({
      where: { id: channelId },
      relations: ['users', 'repositories', 'owner'],
    });
    if (!channel) throw new RpcException({ msg: 'Kh√¥ng t√¨m th·∫•y channel', status: 404 });
    const isMember = channel.users.some((u) => String(u.id) === String(userId));
    if (!isMember) throw new RpcException({ msg: 'B·∫°n kh√¥ng ph·∫£i th√†nh vi√™n c·ªßa k√™nh n√†y', status: 403 });

    // 3. Ki·ªÉm tra repo t·ªìn t·∫°i trong channel
    const repoRepo = this.attachmentRepo.manager.getRepository(RepoEntity);
    const repo = await repoRepo.findOne({
      where: { repo_id: String(repoId) },
      relations: ['channels', 'user'],
    });
    if (!repo || !repo.channels.some((c) => String(c.id) === String(channelId))) {
      throw new RpcException({ msg: 'Repository kh√¥ng t·ªìn t·∫°i trong k√™nh n√†y', status: 404 });
    }

    // 4. Ki·ªÉm tra quy·ªÅn x√≥a: user l√† ch·ªß repo ho·∫∑c owner channel
    const isRepoOwner = String(repo.user.id) === String(userId);
    const isChannelOwner = channel.owner && String(channel.owner.id) === String(userId);
    if (!isRepoOwner && !isChannelOwner) {
      throw new RpcException({ msg: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a repository n√†y kh·ªèi k√™nh', status: 403 });
    }

    // 5. X√≥a li√™n k·∫øt repo kh·ªèi channel
    repo.channels = repo.channels.filter((c) => String(c.id) !== String(channelId));
    await repoRepo.save(repo);

    return { msg: 'ƒê√£ x√≥a repository kh·ªèi k√™nh', repo_id: repoId, channel_id: channelId };
  }

}
